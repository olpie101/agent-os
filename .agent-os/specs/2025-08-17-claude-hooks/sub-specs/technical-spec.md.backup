# Technical Specification

This is the technical specification for the spec detailed in @.agent-os/specs/2025-08-17-claude-hooks/spec.md

<<<<<<< Updated upstream
## TTS Integration Technical Requirements (Completed)

The following TTS requirements have been successfully implemented:

=======
>>>>>>> Stashed changes
## Technical Requirements

### New Gemini TTS Script Implementation

- **File Location:** `claude-code/hooks/utils/tts/gemini_tts.py`
- **Pattern Compliance:** Must follow existing TTS script structure (UV script header, dependency block, CLI interface)
<<<<<<< Updated upstream
- **Environment Variable:** Check `GOOGLE_API_KEY` first, fallback to `GEMINI_API_KEY` for API authentication
- **API Key Priority:** `GOOGLE_API_KEY` takes precedence over `GEMINI_API_KEY` for consistency with LLM implementation
=======
- **Environment Variable:** Check `GOOGLE_API_KEY` for API authentication
>>>>>>> Stashed changes
- **Command Line Interface:** Accept text input via `sys.argv` arguments like other TTS scripts
- **Error Handling:** Silent failure patterns with graceful degradation
- **Output Format:** User feedback with emoji status indicators matching existing scripts

### Hook Integration Updates

- **Target Files:** 
  - `claude-code/hooks/stop.py` (lines 36-62: `get_tts_script_path()`)
  - `claude-code/hooks/notification.py` (similar function)
  - `claude-code/hooks/subagent_stop.py` (similar function)
- **Priority Logic:** Update from `ElevenLabs > OpenAI > pyttsx3` to `Gemini > OpenAI > pyttsx3`
- **Implementation Pattern:** Add Gemini check before existing OpenAI check
- **Backward Compatibility:** Preserve existing OpenAI and pyttsx3 fallback logic

### Gemini TTS Script Structure

- **UV Header:** `#!/usr/bin/env -S uv run --script`
- **Dependencies:** `google-genai`, `python-dotenv` in script comment block
- **API Integration:** Use scripts/tts/gemini.py as API reference only (not template)
- **Interface Consistency:** Match CLI argument handling from openai_tts.py and pyttsx3_tts.py
- **Audio Playback:** Implement direct audio playback without file saving
- **Voice Configuration:** Use appropriate Gemini voice settings for completion messages

### Testing Strategy

<<<<<<< Updated upstream
- **Test File Structure:** All test files must use UV script headers for self-contained execution
- **Unit Tests:** Test gemini_tts.py script functionality including actual google-genai imports
=======
- **Unit Tests:** Test gemini_tts.py script independently with mock API responses
>>>>>>> Stashed changes
- **Integration Tests:** Test get_tts_script_path() priority logic with different environment configurations
- **Fallback Tests:** Verify graceful degradation when Gemini API is unavailable
- **Environment Tests:** Test all combinations of API key availability
- **Regression Tests:** Ensure existing OpenAI and pyttsx3 functionality remains intact

<<<<<<< Updated upstream
### Test File Requirements

All test files must include UV script headers with dependency declarations including the actual packages being tested:

```python
#!/usr/bin/env -S uv run --script
# /// script
# dependencies = [
#   "pytest>=7.0.0",
#   "pytest-mock",
#   "python-dotenv",
#   "google-genai",  # Required for testing Gemini TTS integration
# ]
# ///
```

### Example Test Cases

```python
#!/usr/bin/env -S uv run --script
# /// script
# dependencies = [
#   "pytest>=7.0.0",
#   "pytest-mock",
# ]
# ///

=======
### Example Test Cases

```python
>>>>>>> Stashed changes
# Test priority logic
def test_gemini_priority_with_all_keys():
    """Test that Gemini is selected when all API keys are available"""
    # Mock environment with GOOGLE_API_KEY, OPENAI_API_KEY, ELEVENLABS_API_KEY
    # Assert get_tts_script_path() returns gemini_tts.py path

def test_openai_fallback_without_gemini():
    """Test OpenAI fallback when only OPENAI_API_KEY is available"""
    # Mock environment with only OPENAI_API_KEY
    # Assert get_tts_script_path() returns openai_tts.py path

def test_pyttsx3_final_fallback():
    """Test pyttsx3 fallback when no API keys are available"""
    # Mock environment with no API keys
    # Assert get_tts_script_path() returns pyttsx3_tts.py path

def test_gemini_script_cli_interface():
    """Test gemini_tts.py accepts text via command line arguments"""
    # Test script with various text inputs
    # Verify proper argument parsing and text handling
```

## External Dependencies

- **google-genai** - Google's Generative AI SDK for Gemini TTS functionality
  - **Justification:** Required for Gemini TTS API integration
  - **Version:** Latest stable version compatible with Python 3.8+
<<<<<<< Updated upstream
  - **Import:** `from google import genai`
=======
>>>>>>> Stashed changes

## Implementation Notes

- **Scripts/tts/gemini.py Usage:** Reference for API calls only - do NOT copy structure
- **Pattern Following:** Study openai_tts.py and pyttsx3_tts.py for proper script structure
- **Error Handling:** Match existing silent failure patterns to avoid disrupting Claude Code workflow
<<<<<<< Updated upstream
- **Audio Format:** Use appropriate format for direct playback (likely MP3 with local audio handling)  
- **Voice Selection:** Choose appropriate Gemini voice for completion announcements

## LLM Integration Technical Requirements (New)

### Gemini LLM Script Implementation

- **File Location:** `claude-code/hooks/utils/llm/gemini.py`
- **Pattern Compliance:** Must follow exact interface patterns from anth.py and oai.py
- **Environment Variable:** Check `GOOGLE_API_KEY` first, then `GEMINI_API_KEY` as fallback for API authentication
- **API Key Priority:** `GOOGLE_API_KEY` takes precedence over `GEMINI_API_KEY` (same as TTS implementation)
- **Dependencies:** `google-genai`, `python-dotenv` in UV script header
- **Function Interface:** Implement identical function signatures as existing LLM scripts

### Required Functions Implementation

#### prompt_llm(prompt_text) Function
- **Signature:** `def prompt_llm(prompt_text):`
- **Input:** String containing the prompt text
- **Output:** String response from Gemini or None on error
- **Configuration:** 
  - Model: `gemini-2.0-flash-001` (fastest Gemini model for consistency)
  - Max tokens: 100 (matching anth.py and oai.py)
  - Temperature: 0.7 (matching existing scripts)
- **Error Handling:** Return None on any exception (silent failure pattern)

#### generate_completion_message() Function  
- **Signature:** `def generate_completion_message():`
- **Input:** None (reads ENGINEER_NAME from environment)
- **Output:** String completion message or None on error
- **Personalization Logic:**
  - Read ENGINEER_NAME environment variable
  - Include name ~30% of the time when available
  - Use identical prompt template as anth.py and oai.py
- **Response Cleaning:** Strip quotes, take first line, handle formatting

### CLI Interface Requirements

- **Script Structure:** UV script header with google-genai dependency
- **Argument Handling:** 
  - `--completion` flag for testing completion messages
  - Direct prompt: join remaining sys.argv arguments
  - Usage message when no arguments provided
- **Output Format:** Print response directly or error message
- **Error Messages:** Match existing patterns ("Error calling Gemini API")

### Google-GenAI Integration Patterns

- **Import:** `from google import genai`
- **Client Initialization:** 
  ```python
  client = genai.Client(api_key=api_key)
  ```
- **Content Generation:**
  ```python
  response = client.models.generate_content(
      model='gemini-2.0-flash-001',
      contents=prompt_text
  )
  return response.text.strip()
  ```
- **Configuration:** Use GenerateContentConfig for temperature and max_tokens if needed
- **Authentication:** Environment variable priority: GOOGLE_API_KEY first, then GEMINI_API_KEY as fallback
- **Key Selection Logic:** `api_key = os.getenv("GOOGLE_API_KEY") or os.getenv("GEMINI_API_KEY")`

### Script Structure Template

```python
#!/usr/bin/env -S uv run --script
# /// script
# requires-python = ">=3.8"
# dependencies = [
#     "google-genai",
#     "python-dotenv",
# ]
# ///

import os
import sys
from dotenv import load_dotenv

def prompt_llm(prompt_text):
    """Base Gemini LLM prompting method using fastest model."""
    # Implementation following anth.py pattern

def generate_completion_message():
    """Generate completion message using Gemini LLM."""
    # Implementation following anth.py pattern

def main():
    """Command line interface for testing."""
    # Implementation following anth.py pattern

if __name__ == "__main__":
    main()
```

### Testing Requirements for LLM Integration

- **Test File Location:** `tests/` directory with UV script headers
- **Required Test Coverage:**
  - prompt_llm() function with various inputs
  - generate_completion_message() with and without ENGINEER_NAME
  - CLI interface testing (--completion flag and direct prompts)
  - Error handling when GOOGLE_API_KEY is missing
  - Response cleaning and formatting
- **Dependency Requirements:** Include google-genai in test script headers
- **Pattern Validation:** Verify output matches anth.py and oai.py interfaces

### Integration Validation

- **Interface Compliance:** Functions must be callable with identical parameters as anth.py/oai.py
- **Error Handling:** Must return None on failures, never raise exceptions
- **Output Format:** String responses must be consistent with existing LLM scripts  
- **Environment Setup:** Must work with same environment variable patterns
- **CLI Behavior:** Must respond to same command-line arguments and flags

### LLM Priority Order Implementation

- **Priority Hierarchy:** Gemini > OpenAI > Anthropic for LLM selection
- **Hook Integration:** When hooks need LLM functionality, check API keys in priority order:
  1. Check GOOGLE_API_KEY or GEMINI_API_KEY → Use gemini.py
  2. Check OPENAI_API_KEY → Use oai.py  
  3. Check ANTHROPIC_API_KEY → Use anth.py
- **Fallback Logic:** Gracefully fall through priority chain if higher priority APIs unavailable
- **Selection Function:** Implement get_llm_script_path() similar to get_tts_script_path() pattern
=======
- **Audio Format:** Use appropriate format for direct playback (likely MP3 with local audio handling)
- **Voice Selection:** Choose appropriate Gemini voice for completion announcements
>>>>>>> Stashed changes
